name: CI Pipeline

on:
  push:
    branches:
      - main
      - develop
      - 'feature/**'
  pull_request:
    branches:
      - main
      - develop
  release:
    types: [ created ]

env:
  GO_VERSION: '1.22'
  PYTHON_VERSION: '3.9'

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Install golangci-lint
        run: |
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.55.2

      - name: Run golangci-lint
        run: golangci-lint run --timeout=5m || true

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Python linters
        run: |
          pip install flake8 black pylint

      - name: Lint Python code
        run: |
          flake8 install.py --max-line-length=120 --ignore=E501,W503 || true
          black --check install.py || true

  build:
    name: Build and Test
    runs-on: ubuntu-latest
    needs: lint
    strategy:
      matrix:
        os: [ubuntu-latest, ubuntu-20.04]
        go: ['1.22', '1.21']

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go ${{ matrix.go }}
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ matrix.go }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ matrix.go }}-

      - name: Download dependencies
        run: |
          go mod download
          go mod verify

      - name: Build binary
        run: |
          go build -v -o monitor monitor.go
          chmod +x monitor

      - name: Check binary
        run: |
          ./monitor --version
          ./monitor --help

      - name: Run Go vet
        run: go vet ./...

      - name: Run Go fmt check
        run: |
          if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
            echo "Please run 'go fmt' on your code"
            gofmt -s -l .
            exit 1
          fi

      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: monitor-${{ matrix.os }}-go${{ matrix.go }}
          path: monitor
          retention-days: 7

  test-install-script:
    name: Test Installation Script
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Install Docker
        run: |
          sudo apt-get update
          sudo apt-get install -y docker.io
          sudo systemctl start docker
          sudo systemctl enable docker

      - name: Test install.py syntax
        run: python3 -m py_compile install.py

      - name: Test install.py --help
        run: python3 install.py --help

      - name: Test build process (no systemd)
        run: |
          python3 install.py --no-systemd || true

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  docker-build:
    name: Build Docker Image (Optional)
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        run: |
          cat > Dockerfile << 'EOF'
          FROM golang:1.22-alpine AS builder
          WORKDIR /app
          COPY go.mod go.sum ./
          RUN go mod download
          COPY monitor.go .
          RUN go build -o monitor monitor.go

          FROM alpine:latest
          RUN apk --no-cache add ca-certificates docker-cli
          WORKDIR /root/
          COPY --from=builder /app/monitor .
          ENTRYPOINT ["./monitor"]
          EOF

          docker build -t docker-container-monitor:latest .

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build, test-install-script, security-scan]
    if: github.event_name == 'release'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Build release binaries
        run: |
          # Linux AMD64
          GOOS=linux GOARCH=amd64 go build -o monitor-linux-amd64 monitor.go

          # Linux ARM64
          GOOS=linux GOARCH=arm64 go build -o monitor-linux-arm64 monitor.go

          # macOS AMD64
          GOOS=darwin GOARCH=amd64 go build -o monitor-darwin-amd64 monitor.go

          # macOS ARM64 (Apple Silicon)
          GOOS=darwin GOARCH=arm64 go build -o monitor-darwin-arm64 monitor.go

          # Create checksums
          sha256sum monitor-* > checksums.txt

      - name: Upload release assets
        uses: softprops/action-gh-release@v1
        with:
          files: |
            monitor-linux-amd64
            monitor-linux-arm64
            monitor-darwin-amd64
            monitor-darwin-arm64
            checksums.txt
            install.py
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  notify:
    name: Notify Status
    runs-on: ubuntu-latest
    needs: [lint, build, test-install-script, security-scan]
    if: always()

    steps:
      - name: Check build status
        run: |
          if [ "${{ needs.build.result }}" != "success" ]; then
            echo "Build failed!"
            exit 1
          fi
          echo "All checks passed! âœ…"
